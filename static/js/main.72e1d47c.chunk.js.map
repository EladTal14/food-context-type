{"version":3,"sources":["shared/assests/img/meals.jpg","core/pages/cart/cart-icon/cart-icon.tsx","store/cart-context.tsx","shared/components/layout/header/button/header-cart-button.tsx","shared/components/layout/header/header.tsx","shared/components/ui/card/card.tsx","shared/components/ui/input/input.tsx","core/pages/meals/meal-item/meal-item-form.tsx","core/pages/meals/meal-item/meal-item.tsx","shared/services/http-calls.ts","core/pages/meals/available-meals/available-meals.tsx","shared/hooks/use-meals-api.ts","core/pages/meals/meals-summary/meals-summary.tsx","core/pages/meals/meals.tsx","shared/components/ui/modal/modal.tsx","core/pages/cart/cart-item/cart-item.tsx","core/pages/cart/checkout/checkout.tsx","core/pages/cart/cart.tsx","store/cart-provider.tsx","App.tsx","index.tsx"],"names":["CartIcon","xmlns","viewBox","fill","d","CartContext","React","createContext","items","totalAmount","addItem","item","removeItem","id","clearCart","HeaderCartButton","showCartHandler","cartCtx","useContext","useState","btnIsHiglight","setBtnIsHiglight","numOfCartItems","reduce","acc","amount","btnClass","useEffect","length","timerId","setTimeout","clearTimeout","className","onClick","Header","src","meals","alt","Card","children","InputDiv","forwardRef","props","ref","input","label","htmlFor","MealItemForm","addToCartHandler","amountIsValid","setAmountIsValid","inputRef","useRef","onSubmit","e","enteredAmount","preventDefault","current","value","trim","type","min","max","step","defaultValue","MealItem","name","description","price","formatedPrice","toFixed","getMealsFromDb","a","fetch","process","REACT_APP_API_KEY_MEALS","res","ok","Error","json","data","postOrderDataToDb","user","REACT_APP_API_KEY_ORDER","method","body","JSON","stringify","AvailableMeals","setMeals","isLoading","setIsLoading","httpError","setHttpError","key","loadedMeals","push","fecthMeals","catch","err","message","useMealsApi","mealsList","map","meal","MealsSummary","Meals","BackDrop","ModalOverLay","portalElement","document","getElementById","Modal","ReactDOM","createPortal","CartItem","onRemove","onAdd","isEmpty","Checkout","submitOrderHandler","street","city","postalCode","formInputValidity","setFormValidity","nameInputRef","streetInputRef","postalInputRef","cityInputRef","StyledForm","ev","enteredName","enteredStreet","enteredPostal","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredPostalIsValid","enteredCityIsValid","styled","form","Cart","isCheckout","setIsCheckout","isSubmitting","setIsSubmitting","didSubmit","setDidSubmit","didError","setDidError","onAddCartItemHandler","cartItems","hasItems","userData","console","log","cartModalContent","isSubmittingModalContent","isErrorOcurred","didSubmitModalContent","defaultCartState","cartReducer","state","action","updatedItem","updatedItems","updatedTotalAmount","payload","exsitingCartItemIndex","findIndex","existingCartItem","concat","existingCartItemIndex","filter","CartProvider","useReducer","cartState","dispatchCartAction","cartContext","Provider","App","cartIsShown","setCartIsShown","prevState","render"],"mappings":"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","file":"static/js/main.72e1d47c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/meals.2971f633.jpg\";","export const CartIcon = () => {\r\n    return (\r\n        <svg\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            viewBox='0 0 20 20'\r\n            fill='currentColor'\r\n        >\r\n            <path d='M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z' />\r\n        </svg>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Meal} from \"../shared/interfaces/meal\";\r\n\r\ninterface ICartContext {\r\n    items: Meal[];\r\n    totalAmount: number;\r\n    addItem: (item: Meal) => void;\r\n    removeItem: (id: string) => void;\r\n    clearCart: () => void;\r\n}\r\n\r\nexport const CartContext = React.createContext<ICartContext>({\r\n    items: [],\r\n    totalAmount: 0,\r\n    addItem: (item: Meal) => {\r\n    },\r\n    removeItem: (id: string) => {\r\n    },\r\n    clearCart: () => {\r\n\r\n    }\r\n})","import {CartIcon} from '../../../../../core/pages/cart/cart-icon/cart-icon'\r\nimport './header-cart-button.css'\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {CartContext} from \"../../../../../store/cart-context\";\r\n\r\nexport const HeaderCartButton: React.VFC<{ showCartHandler: Function }> = ({showCartHandler}) => {\r\n    const cartCtx = useContext(CartContext)\r\n    const {items} = cartCtx\r\n    const [btnIsHiglight, setBtnIsHiglight] = useState(false)\r\n    const numOfCartItems = items.reduce((acc, item: { amount: number }) => {\r\n        return acc + item.amount\r\n    }, 0)\r\n    const btnClass = `button ${btnIsHiglight ? 'bump' : ''}`\r\n\r\n    useEffect(() => {\r\n        if (cartCtx.items.length === 0) {\r\n            return;\r\n        }\r\n        setBtnIsHiglight(true);\r\n        const timerId = setTimeout(() => setBtnIsHiglight(false), 300)\r\n        return () => {\r\n            clearTimeout(timerId)\r\n        }\r\n    }, [items])\r\n    return (\r\n        <button className={`${btnClass}`} onClick={() => showCartHandler()}>\r\n            <span className=\"icon\">\r\n                <CartIcon/>\r\n            </span>\r\n            <span>Your Cart</span>\r\n            <span className=\"badge\">{numOfCartItems}</span>\r\n        </button>\r\n    );\r\n};\r\n\r\n","import './header.css'\r\nimport meals from '../../../assests/img/meals.jpg'\r\nimport {HeaderCartButton} from \"./button/header-cart-button\";\r\nimport React from \"react\";\r\n\r\nexport const Header: React.VFC<{ showCartHandler: () => void }> = ({showCartHandler}) => {\r\n    return (\r\n        <>\r\n            <header className=\"header\">\r\n                <h1>ReactMeals</h1>\r\n                <HeaderCartButton showCartHandler={showCartHandler}/>\r\n            </header>\r\n            <div className=\"main-image\">\r\n                <img src={meals} alt=\"meals\"/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport './card.css'\r\n\r\nexport const Card:React.FC = ({children}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import './input.css'\r\nimport React from \"react\";\r\nimport {InputProps} from \"../../../interfaces/input\";\r\n\r\n\r\nexport const InputDiv = React.forwardRef<HTMLInputElement, InputProps>((props, ref) => {\r\n    const {input, label} = props as InputProps;\r\n    return (\r\n        <div className=\"input\">\r\n            <label htmlFor={input.id}> {label}</label>\r\n            <input ref={ref} {...input}/>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import './meal-item-form.css'\r\nimport {InputDiv} from '../../../../shared/components/ui/input/input'\r\nimport React, {useRef, useState} from \"react\";\r\n\r\nexport const MealItemForm: React.VFC<{ id: string, addToCartHandler: (amount: number) => void }> = ({\r\n                                                                                                        id,\r\n                                                                                                        addToCartHandler\r\n                                                                                                    }) => {\r\n    const [amountIsValid, setAmountIsValid] = useState(true)\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        let enteredAmount;\r\n        if (inputRef.current !== null) {\r\n            enteredAmount = inputRef.current.value;\r\n            if (enteredAmount.trim().length === 0 || +enteredAmount < 1 || +enteredAmount > 5) {\r\n                setAmountIsValid(false)\r\n                return\r\n            }\r\n            addToCartHandler(+enteredAmount)\r\n        }\r\n    };\r\n    return (\r\n        <form className=\"form\" onSubmit={submitHandler}>\r\n            <InputDiv label=\"Amount\" ref={inputRef}\r\n                      input={{id: id, type: 'number', min: '1', max: '5', step: \"1\", defaultValue: \"1\"}}/>\r\n            <button>+ Add</button>\r\n            {!amountIsValid && <p>Please enter a valid amount (1-5).</p>}\r\n        </form>\r\n    );\r\n};","import './meal-item.css'\r\nimport React, {useContext} from \"react\";\r\nimport {Meal} from \"../../../../shared/interfaces/meal\";\r\nimport {MealItemForm} from \"./meal-item-form\";\r\nimport {CartContext} from \"../../../../store/cart-context\";\r\n\r\nexport const MealItem: React.VFC<Meal> = ({name, id, description, price}) => {\r\n    const cartCtx = useContext(CartContext)\r\n    const formatedPrice = `$${price.toFixed(2)}`\r\n    const addToCartHandler = (amount: number) => {\r\n        cartCtx.addItem({\r\n            id,\r\n            name,\r\n            amount,\r\n            price,\r\n            description\r\n        })\r\n    }\r\n    return (\r\n        <li className=\"meal\">\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <div className=\"description\">{description}</div>\r\n                <div className=\"price\">{formatedPrice}</div>\r\n            </div>\r\n            <div>\r\n                <MealItemForm addToCartHandler={addToCartHandler} id={id}/>\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\n","export const getMealsFromDb = async () => {\r\n    const res = await fetch(process.env.REACT_APP_API_KEY_MEALS as string);\r\n    if (!res.ok) {\r\n        throw new Error('something went horribly wrong!');\r\n    }\r\n    const data = await res.json();\r\n    return data;\r\n}\r\n\r\nexport const postOrderDataToDb = async <T, G>(user: T, items: G) => {\r\n    const res = await fetch(process.env.REACT_APP_API_KEY_ORDER as string, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            user,\r\n            items\r\n        })\r\n    });\r\n    if (!res.ok) {\r\n        throw new Error('something went horribly wrong!');\r\n    }\r\n}","import {Meal} from \"../../../../shared/interfaces/meal\";\r\nimport './available-meals.css'\r\nimport {Card} from \"../../../../shared/components/ui/card/card\";\r\nimport {MealItem} from \"../meal-item/meal-item\";\r\nimport {useMealsApi} from \"../../../../shared/hooks/use-meals-api\";\r\n\r\nexport const AvailableMeals = () => {\r\n    const {setMeals, meals, isLoading, httpError} = useMealsApi()\r\n    const mealsList = meals.map((meal: Meal) => {\r\n        return (\r\n            <MealItem key={meal.id} {...meal}/>\r\n        );\r\n    });\r\n    if (isLoading) {\r\n        return (\r\n            <section className=\"meals-loading\">\r\n                <p>Loading...</p>\r\n            </section>\r\n        )\r\n    }\r\n    if (httpError) {\r\n        return (\r\n            <section className=\"meals-error\">\r\n                <p>{httpError}</p>\r\n            </section>\r\n        )\r\n    }\r\n    return (\r\n        <section className=\"meals\">\r\n            <Card>\r\n                <ul>\r\n                    {mealsList}\r\n                </ul>\r\n            </Card>\r\n        </section>\r\n    );\r\n};\r\n\r\n","import {useEffect, useState} from \"react\";\r\nimport {Meal} from \"../interfaces/meal\";\r\nimport {getMealsFromDb} from \"../services/http-calls\";\r\n\r\nexport const useMealsApi = () => {\r\n    const [meals, setMeals] = useState<Meal[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [httpError, setHttpError] = useState();\r\n\r\n    useEffect(() => {\r\n        const fecthMeals = async () => {\r\n            const data = await getMealsFromDb();\r\n            const loadedMeals: Meal[] = [];\r\n            for (const key in data) {\r\n                loadedMeals.push({\r\n                    id: key,\r\n                    name: data[key].name,\r\n                    description: data[key].description,\r\n                    price: data[key].price,\r\n                    amount: data[key].amount\r\n                })\r\n            }\r\n            setMeals(loadedMeals)\r\n            setIsLoading(false)\r\n        }\r\n        fecthMeals().catch(err => {\r\n            setIsLoading(false)\r\n            setHttpError(err.message)\r\n        });\r\n    }, [])\r\n\r\n    return {meals, setMeals, isLoading, httpError};\r\n}","import './meals-summary.css'\r\n\r\nexport const MealsSummary = () => {\r\n    return (\r\n        <section className=\"summary\">\r\n            <h2>Delicious Food, Delivered To You</h2>\r\n            <p>\r\n                Choose your favorite meal from our broad selection of available meals\r\n                and enjoy a delicious lunch or dinner at home.\r\n            </p>\r\n            <p>\r\n                All our meals are cooked with high-quality ingredients, just-in-time and\r\n                of course by experienced chefs!\r\n            </p>\r\n        </section>\r\n    );\r\n};\r\n\r\n","import {AvailableMeals} from './available-meals/available-meals'\r\nimport {MealsSummary} from './meals-summary/meals-summary'\r\n\r\nexport const Meals = () => {\r\n    return (\r\n        <>\r\n            <MealsSummary/>\r\n            <AvailableMeals/>\r\n        </>\r\n    );\r\n};","import './modal.css'\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst BackDrop: React.VFC<{ showCartHandler: Function }> = ({showCartHandler}) => {\r\n    return <div onClick={() => showCartHandler()} className=\"backdrop\"/>\r\n}\r\nconst ModalOverLay: React.FC<{ children: JSX.Element[] }> = ({children}) => {\r\n    return <div className=\"modal\">\r\n        <div className=\"content\">{children}</div>\r\n    </div>\r\n}\r\n\r\nconst portalElement: HTMLElement = document.getElementById('overlays') as HTMLElement\r\n\r\nexport const Modal: React.FC<{ children: JSX.Element[], showCartHandler: Function }> = ({\r\n                                                                                            children,\r\n                                                                                            showCartHandler\r\n                                                                                        }) => {\r\n    return (\r\n        <>\r\n            {ReactDOM.createPortal(<BackDrop showCartHandler={showCartHandler}/>, portalElement)}\r\n            {ReactDOM.createPortal(<ModalOverLay>{children}</ModalOverLay>, portalElement)}\r\n        </>\r\n    );\r\n};\r\n\r\n","import './cart-item.css'\r\nimport React from \"react\";\r\nimport {Meal} from \"../../../../shared/interfaces/meal\";\r\n\r\ninterface ICartItem {\r\n    meal: Meal;\r\n    onRemove: (id: string) => void;\r\n    onAdd: (item: Meal) => void;\r\n}\r\n\r\nexport const CartItem: React.VFC<ICartItem> = ({\r\n                                                   meal,\r\n                                                   onRemove,\r\n                                                   onAdd\r\n                                               }) => {\r\n    const {id, price, amount, name} = meal;\r\n    return (\r\n        <li className='cart-item'>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <div className=\"cart-item--summary\">\r\n                    <span className=\"cart-item--summary--price\">{price.toFixed(2)}</span>\r\n                    <span className=\"cart-item--summary--amount\">x {amount}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"cart-item--summary--actions\">\r\n                <button onClick={() => onRemove(id)}>−</button>\r\n                <button onClick={() => onAdd(meal)}>+</button>\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\n","import React, {useRef, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {UserFormData} from \"../../../../shared/interfaces/user-form-data\";\r\n\r\nconst isEmpty = (value: string) => value.trim() === '';\r\nconst isFiveChars = (value: string) => value.trim().length <= 5;\r\n\r\ninterface UserFormValidity {\r\n    name: boolean;\r\n    street: boolean;\r\n    city: boolean;\r\n    postalCode: boolean;\r\n}\r\n\r\ntype ICheckoutProps = {\r\n    showCartHandler: () => void,\r\n    submitOrderHandler: (userData: UserFormData) => void\r\n}\r\n\r\nexport const Checkout: React.VFC<ICheckoutProps> = ({\r\n                                                        showCartHandler,\r\n                                                        submitOrderHandler\r\n                                                    }) => {\r\n    const [formInputValidity, setFormValidity] = useState<UserFormValidity>({\r\n        name: true,\r\n        street: true,\r\n        city: true,\r\n        postalCode: true\r\n    })\r\n\r\n    const nameInputRef = useRef<HTMLInputElement>(null);\r\n    const streetInputRef = useRef<HTMLInputElement>(null);\r\n    const postalInputRef = useRef<HTMLInputElement>(null);\r\n    const cityInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const confirmHandler = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        ev.preventDefault()\r\n        let enteredName, enteredStreet, enteredPostal, enteredCity;\r\n        let enteredNameIsValid, enteredStreetIsValid, enteredPostalIsValid, enteredCityIsValid;\r\n        let formIsValid;\r\n        if (nameInputRef.current !== null && streetInputRef.current !== null &&\r\n            postalInputRef.current !== null && cityInputRef.current !== null) {\r\n            enteredName = nameInputRef.current.value;\r\n            enteredPostal = postalInputRef.current.value;\r\n            enteredCity = cityInputRef.current.value;\r\n            enteredStreet = streetInputRef.current.value;\r\n\r\n            enteredNameIsValid = !isEmpty(enteredName);\r\n            enteredCityIsValid = !isEmpty(enteredCity);\r\n            enteredStreetIsValid = !isEmpty(enteredStreet);\r\n            enteredPostalIsValid = !isFiveChars(enteredPostal);\r\n            setFormValidity({\r\n                name: enteredNameIsValid,\r\n                postalCode: enteredPostalIsValid,\r\n                city: enteredCityIsValid,\r\n                street: enteredStreetIsValid\r\n            });\r\n            formIsValid = enteredNameIsValid && enteredCityIsValid && enteredStreetIsValid && enteredPostalIsValid;\r\n            if (!formIsValid) {\r\n                return\r\n            }\r\n        }\r\n        submitOrderHandler({\r\n            name: (enteredName as string),\r\n            city: (enteredCity as string),\r\n            street: (enteredStreet as string),\r\n            postalCode: (enteredPostal as string)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <StyledForm onSubmit={confirmHandler}>\r\n            <div className={`control ${!formInputValidity.name ? 'invalid' : ''}`}>\r\n                <label htmlFor=\"name\">Your Name</label>\r\n                <input ref={nameInputRef} type=\"text\" id=\"name\"/>\r\n                {!formInputValidity.name && <p>Please enter valid name</p>}\r\n            </div>\r\n            <div className={`control ${!formInputValidity.street ? 'invalid' : ''}`}>\r\n                <label htmlFor=\"street\">Street</label>\r\n                <input ref={streetInputRef} type=\"text\" id=\"street\"/>\r\n                {!formInputValidity.street && <p>Please enter valid name</p>}\r\n            </div>\r\n            <div className={`control ${!formInputValidity.postalCode ? 'invalid' : ''}`}>\r\n                <label htmlFor=\"postal\">Postal Code</label>\r\n                <input ref={postalInputRef} type=\"text\" id=\"postal\"/>\r\n                {!formInputValidity.postalCode && <p>Please enter valid postal code</p>}\r\n            </div>\r\n            <div className={`control ${!formInputValidity.city ? 'invalid' : ''}`}>\r\n                <label htmlFor=\"city\">City</label>\r\n                <input ref={cityInputRef} type=\"text\" id=\"city\"/>\r\n                {!formInputValidity.city && <p>Please enter valid city</p>}\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" onClick={showCartHandler}>Cancel</button>\r\n                <button>Confirm</button>\r\n            </div>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nconst StyledForm = styled.form`\r\n  form {\r\n    margin: 1rem 0;\r\n    height: 19rem;\r\n    overflow: auto;\r\n  }\r\n\r\n  & .control {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  & .control label {\r\n    font-weight: bold;\r\n    margin-bottom: 0.25rem;\r\n    display: block;\r\n  }\r\n\r\n  & .control input {\r\n    font: inherit;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    width: 20rem;\r\n    max-width: 100%;\r\n  }\r\n\r\n  & .actions {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 1rem;\r\n  }\r\n\r\n  & div button {\r\n    font: inherit;\r\n    color: #5a1a01;\r\n    cursor: pointer;\r\n    background-color: transparent;\r\n    border: none;\r\n    border-radius: 25px;\r\n    padding: 0.5rem 2rem;\r\n  }\r\n\r\n  & div button:hover,\r\n  div button:active {\r\n    background-color: #ffe6dc;\r\n  }\r\n\r\n  & div .submit {\r\n    border: 1px solid #5a1a01;\r\n    background-color: #5a1a01;\r\n    color: white;\r\n  }\r\n\r\n  & div .submit:hover,\r\n  div .submit:active {\r\n    background-color: #7a2706;\r\n  }\r\n\r\n  & .invalid label {\r\n    color: #ca3e51;\r\n  }\r\n\r\n  & .invalid input {\r\n    border-color: #aa0b20;\r\n    background-color: #ffeff1;\r\n  }\r\n`\r\n","import * as React from 'react'\r\nimport {useContext, useState} from 'react'\r\nimport {Modal} from \"../../../shared/components/ui/modal/modal\";\r\nimport './cart.css'\r\nimport {CartContext} from \"../../../store/cart-context\";\r\nimport {CartItem} from \"./cart-item/cart-item\";\r\nimport {Meal} from \"../../../shared/interfaces/meal\";\r\nimport {Checkout} from \"./checkout/checkout\";\r\nimport {UserFormData} from \"../../../shared/interfaces/user-form-data\";\r\nimport {postOrderDataToDb} from \"../../../shared/services/http-calls\";\r\n\r\nexport const Cart: React.FC<{ showCartHandler: () => void }> = ({showCartHandler}) => {\r\n    const [isCheckout, setIsCheckout] = useState(false);\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [didSubmit, setDidSubmit] = useState(false);\r\n    const [didError, setDidError] = useState(false);\r\n\r\n    const cartCtx = useContext(CartContext);\r\n    const onAddCartItemHandler = (item: Meal) => {\r\n        cartCtx.addItem({...item, amount: 1});\r\n    }\r\n    const cartItems = <ul className=\"cart-items\">{cartCtx.items.map((item) => {\r\n        return <CartItem key={item.id} meal={item} onAdd={onAddCartItemHandler}\r\n                         onRemove={cartCtx.removeItem}/>\r\n    })}</ul>;\r\n    const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\r\n    const hasItems = cartCtx.items.length > 0;\r\n\r\n    const orderHandler = () => {\r\n        setIsCheckout(true);\r\n    }\r\n\r\n    const submitOrderHandler = async (userData: UserFormData) => {\r\n        setIsSubmitting(true);\r\n        try {\r\n            await postOrderDataToDb(userData, cartCtx.items)\r\n            setIsSubmitting(false);\r\n            setDidSubmit(true);\r\n            cartCtx.clearCart();\r\n        } catch (err) {\r\n            setDidError(true)\r\n            console.log(err.message)\r\n        }\r\n\r\n    };\r\n\r\n    const cartModalContent = <>\r\n        {cartItems}\r\n        <div className=\"total\">\r\n            <span>Total amount</span>\r\n            <span>{totalAmount}</span>\r\n        </div>\r\n        <>\r\n            {isCheckout && <Checkout submitOrderHandler={submitOrderHandler} showCartHandler={showCartHandler}/>}\r\n            {!isCheckout && <div className=\"actions\">\r\n                <button className=\"button--alt\" onClick={() => showCartHandler()}>Close</button>\r\n                {hasItems && <button onClick={orderHandler} className=\"button\">Order</button>}\r\n            </div>}\r\n        </>\r\n    </>\r\n\r\n    const isSubmittingModalContent = <p>Sending order data</p>\r\n    const isErrorOcurred = <p>Error has occurred please try again</p>\r\n    const didSubmitModalContent = <>\r\n        <div className=\"actions\">\r\n            <button className=\"button\" onClick={() => showCartHandler()}>Close</button>\r\n        </div>\r\n        <p>Successfully sent the order</p>\r\n    </>\r\n\r\n    return (\r\n        <Modal showCartHandler={showCartHandler}>\r\n            <></>\r\n            <>\r\n                {!isSubmitting && !didError && !didSubmit && cartModalContent}\r\n                {isSubmitting && !didError && isSubmittingModalContent}\r\n                {didError && isErrorOcurred}\r\n                {!isSubmitting && didSubmit && !didError && didSubmitModalContent}\r\n            </>\r\n        </Modal>\r\n    );\r\n\r\n}\r\n\r\n","import {CartContext} from './cart-context'\r\nimport React, {useReducer} from \"react\";\r\nimport {Meal} from \"../shared/interfaces/meal\";\r\n\r\ntype State = {\r\n    items: Meal[],\r\n    totalAmount: number\r\n}\r\n\r\nconst defaultCartState: State = {\r\n    items: [],\r\n    totalAmount: 0\r\n}\r\n\r\ntype Action = { type: 'ADD_ITEM', payload: Meal }\r\n    | { type: 'REMOVE_ITEM', payload: string }\r\n    | { type: 'CLEAR_CART' }\r\n\r\nconst cartReducer = (state: State, action: Action) => {\r\n    switch (action.type) {\r\n        case \"ADD_ITEM\": {\r\n            const updatedTotalAmount = state.totalAmount + action.payload.price * action.payload.amount;\r\n            const exsitingCartItemIndex = state.items.findIndex(item => item.id === action.payload.id);\r\n            const existingCartItem = state.items[exsitingCartItemIndex]\r\n            let updatedItem;\r\n            let updatedItems;\r\n            if (existingCartItem) {\r\n                updatedItem = {\r\n                    ...existingCartItem, amount: existingCartItem.amount + action.payload.amount\r\n                };\r\n                updatedItems = [...state.items] as Meal[];\r\n                updatedItems[exsitingCartItemIndex] = updatedItem;\r\n            } else {\r\n                updatedItem = {...action.payload}\r\n                updatedItems = state.items.concat(action.payload) as Meal[];\r\n            }\r\n            return {...state, items: updatedItems, totalAmount: updatedTotalAmount};\r\n        }\r\n        case \"REMOVE_ITEM\": {\r\n            const existingCartItemIndex = state.items.findIndex(item => item.id === action.payload)\r\n            const existingCartItem = state.items[existingCartItemIndex]\r\n            const updatedTotalAmount = state.totalAmount - existingCartItem.price\r\n            let updatedItems;\r\n            if (existingCartItem.amount === 1) {\r\n                updatedItems = state.items.filter(item => item.id !== action.payload)\r\n            } else {\r\n                const updatedItem = {...existingCartItem, amount: existingCartItem.amount - 1}\r\n                updatedItems = [...state.items]\r\n                updatedItems[existingCartItemIndex] = updatedItem\r\n            }\r\n            return {...state, items: updatedItems, totalAmount: updatedTotalAmount}\r\n        }\r\n        case \"CLEAR_CART\": {\r\n            return defaultCartState\r\n        }\r\n    }\r\n    return defaultCartState\r\n}\r\n\r\nexport const CartProvider: React.FC = ({children}) => {\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\r\n    const addItemToCartHandle = (item: Meal) => {\r\n        dispatchCartAction({type: 'ADD_ITEM', payload: item})\r\n    }\r\n    const RemoveItemToCartHandle = (id: string) => {\r\n        dispatchCartAction({type: 'REMOVE_ITEM', payload: id})\r\n    }\r\n    const clearCartHandler = () => {\r\n        dispatchCartAction({type: 'CLEAR_CART'})\r\n    }\r\n    const cartContext = {\r\n        items: cartState.items as Meal[],\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: addItemToCartHandle,\r\n        removeItem: RemoveItemToCartHandle,\r\n        clearCart: clearCartHandler\r\n    }\r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    )\r\n}","import React, {useState} from 'react';\nimport {Header} from \"./shared/components/layout/header/header\";\nimport {Meals} from \"./core/pages/meals/meals\";\nimport {Cart} from \"./core/pages/cart/cart\";\nimport {CartProvider} from \"./store/cart-provider\";\n\nfunction App() {\n    const [cartIsShown, setCartIsShown] = useState(false);\n    const showCartHandler = () => {\n        setCartIsShown(prevState => !prevState);\n    };\n\n    return (\n        <CartProvider>\n            {cartIsShown && <Cart showCartHandler={showCartHandler}/>}\n            <Header showCartHandler={showCartHandler}/>\n            <main>\n                <Meals/>\n            </main>\n        </CartProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App/>\n    ,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}